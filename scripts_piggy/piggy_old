#!/bin/bash

usage()
{
cat << EOF

piggy

 -i input directory [default - current directory]
 -o output directory [default - current directory/piggy_out]
 -r roary output directory [required]
 -t threads [default - 1]
 -n minimum percentage nucleotide identity [default - 90]
 -l minimum percentage length identity [default - 90]
 -m method for detecting switched IGRs [g - gene pair, u - upstream] [default - g]
 -R Make R plots (Needs R, Rscript, ggplot2, reshape2) [default - off]
 -f Fast mode (doesn't align IGRs or detect switched regions) [default - off]
 -h help

EOF
}

if [[ ! $@ =~ ^\-.+ ]]
then
	usage
	exit
fi

# Check for dependencies.

# cd-hit
cd_hit_command_array=("cd-hit-est" "cdhit-est")

found=0
for command in ${cd_hit_command_array[@]}
do
	cd_hit_command=$(command -v $command)
	
	if [ ! -z "$cd_hit_command" ]
	then
		found=1
		
		break
	fi
done

if [ "$found" -eq 1 ]
then
	printf "cd-hit found: %s\n" "$cd_hit_command"
else
	printf "Error: cd-hit not found\n"
	exit
fi

# mafft
mafft_command_array=("mafft")

found=0
for command in ${mafft_command_array[@]}
do
	mafft_command=$(command -v $command)
	
	if [ ! -z "$mafft_command" ]
	then
		found=1
		
		break
	fi
done

if [ "$found" -eq 1 ]
then
	printf "mafft found: %s\n" "$mafft_command"
else
	printf "Error: mafft not found\n"
	exit
fi

# blastn
blastn_command_array=("blastn")

found=0
for command in ${blastn_command_array[@]}
do
	blastn_command=$(command -v $command)
	
	if [ ! -z "$blastn_command" ]
	then
		found=1
		
		break
	fi
done

if [ "$found" -eq 1 ]
then
	printf "blastn found: %s\n" "$blastn_command"
else
	printf "Error: blastn not found\n"
	exit
fi

# makeblastdb
makeblastdb_command_array=("makeblastdb")

found=0
for command in ${makeblastdb_command_array[@]}
do
	makeblastdb_command=$(command -v $command)
	
	if [ ! -z "$makeblastdb_command" ]
	then
		found=1
		
		break
	fi
done

if [ "$found" -eq 1 ]
then
	printf "makeblastdb found: %s\n" "$makeblastdb_command"
else
	printf "Error: makeblastdb not found\n"
	exit
fi


while getopts "i: o: r: t: n: l: m: R f h" opt; do
 	case "$opt" in
		i) in_dir=$OPTARG;;
		o) out_dir=$OPTARG;;
		r) roary_dir=$OPTARG;;
		t) threads=$OPTARG;;
		n) nuc_identity=$OPTARG;;
		l) len_identity=$OPTARG;;
		m) method=$OPTARG;;
		R) R_plots=1;;
		f) fast=1;;
		h) usage;exit;;
	esac
done

# Check options and set defaults.
if [ -z "$in_dir" ]
then
	in_dir=$(pwd)
fi

if [ -z "$out_dir" ]
then
	out_dir="$PWD/piggy_out"
fi

if [ -z "$roary_dir" ]
then
	printf "Error: No Roary output directory specified.\n"
	exit
fi

if [ -z "$threads" ]
then
	threads=1
fi

if [ -z "$nuc_identity" ]
then
	nuc_identity=0.9
	cdhit_nuc_identity=$nuc_identity
elif [ "$nuc_identity" -lt 80 ]
then
	cdhit_nuc_identity=0.8
else
	nuc_identity=$(echo "print $nuc_identity / 100" | perl)
	cdhit_nuc_identity=$nuc_identity
fi

if [ -z "$len_identity" ]
then
	len_identity=0.9
else
	len_identity=$(echo "print $len_identity / 100" | perl)
fi

if [ -z "$method" ]
then
	method="GENE_PAIR"
elif [ "$method" == "g" ]
then
	method="GENE_PAIR"
elif [ "$method" == "u" ]
then
	method="UPSTREAM"
else
	printf "Error: Incorrect method specified.\n"
	exit
fi

if [ -z "$R_plots" ]
then
	R_plots=0
fi

if [ -z "$fast" ]
then
	fast=0
fi

if [ ! -d "$in_dir" ]
then
	printf "Error: Input folder doesn't exist.\n"
	exit
fi

if [ ! -d "$out_dir" ]
then
	mkdir "$out_dir"
	
	if [ -d "$out_dir" ]
	then
		printf "Created output folder $out_dir\n"
	fi
fi

file_array=("$in_dir/*.gff")

count=0
for file in $file_array
do
	isolate=("${file##*/}")
	isolate=("${isolate%%.*}")
	
	isolate_array[count]=$isolate
	
	count=$((count + 1))
done

isolate_count=${#isolate_array[@]}

if [ "$isolate_count" -gt 0 ]
then
	printf "$isolate_count isolates found.\n"
else
	printf "Error: $isolate_count isolates found in the input folder.\n"
	exit
fi	

printf "" > "$out_dir/log.txt"

printf "" >  "$out_dir/isolates.txt"

for i in ${isolate_array[@]}
do
	printf "%s\n" $i >> "$out_dir/isolates.txt"
done

if [ ! -d "$out_dir/coordinate_files" ]
then
	mkdir "$out_dir/coordinate_files"
fi

if [ -f "$out_dir/IGR_sequences.fasta" ]
then
	rm "$out_dir/IGR_sequences.fasta"
fi

if [ ! -d "$out_dir/isolate_intergenic_files" ]
then
	mkdir "$out_dir/isolate_intergenic_files"
fi

if [ ! -d "$out_dir/isolate_gene_fragment_files" ]
then
	mkdir "$out_dir/isolate_gene_fragment_files"
fi

if [ ! -d "$out_dir/gff_files" ]
then
	mkdir "$out_dir/gff_files"
fi

cp "$in_dir/"*.gff "$out_dir/gff_files"

if [ -d "$roary_dir/fixed_input_files" ]
then
	cp "$roary_dir/fixed_input_files/"*.gff "$out_dir/gff_files"
fi

for isolate in ${isolate_array[@]}
do	
	piggy_gff_modifier.pl "$out_dir/gff_files/$isolate.gff" >> "$out_dir/log.txt"
	
	piggy_gene_intergenic_coordinate_extracter.pl "$isolate" "$out_dir/gff_files/$isolate.gff.modified" "$out_dir/coordinate_files" >> "$out_dir/log.txt"
	
	if [ ! -d "$out_dir/isolate_intergenic_files/$isolate" ]; then
		mkdir "$out_dir/isolate_intergenic_files/$isolate"
	fi
	
	if [ ! -d "$out_dir/isolate_gene_fragment_files/$isolate" ]; then
		mkdir "$out_dir/isolate_gene_fragment_files/$isolate"
	fi
	
	piggy_intergenic_sequence_extracter.pl "$isolate" "$out_dir/gff_files/$isolate.gff.modified" "$out_dir/coordinate_files/${isolate}_intergenic_coordinates.tab" "$out_dir" "$out_dir/isolate_intergenic_files/$isolate" "$out_dir/coordinate_files/${isolate}_gene_coordinates.tab" "$out_dir/isolate_gene_fragment_files/$isolate" >> "$out_dir/log.txt"
done

printf "Clustering IGRs...\n" >> "$out_dir/log.txt";printf "Clustering IGRs...\n"

$cd_hit_command -i $out_dir/IGR_sequences.fasta -o "$out_dir/IGR_sequences_clustered.fasta" -T "$threads" -n 10 -d 0 -c "$cdhit_nuc_identity" -G 0 -s "$len_identity" -aS 0.9 -g 0 -r 1 -mask N -M 0 &> /dev/null

printf "IGRs clustered.\n" >> "$out_dir/log.txt";printf "IGRs clustered.\n"

if [ ! -d "$out_dir/cluster_intergenic_files" ]
then
	mkdir "$out_dir/cluster_intergenic_files"
fi

if [ ! -d "$out_dir/cluster_intergenic_alignment_files" ]
then
	mkdir "$out_dir/cluster_intergenic_alignment_files"
fi

if [ ! -d "$out_dir/cluster_representative_files" ]
then
	mkdir "$out_dir/cluster_representative_files"
fi

piggy_cluster_file_creator.pl "$out_dir" >> "$out_dir/log.txt"

printf "Doing all-vs-all IGR cluster search.\n" >> "$out_dir/log.txt";printf "Doing all-vs-all IGR cluster search.\n"

$makeblastdb_command -in "$out_dir/representative_clusters.fasta" -out "$out_dir/representative_clusters_db" -dbtype nucl > /dev/null

$blastn_command -db "$out_dir/representative_clusters_db" -query "$out_dir/representative_clusters.fasta" -num_threads "$threads" -dust no -task blastn -out "$out_dir/representative_clusters_blast_out.tab" -outfmt "6 qseqid sseqid qlen slen pident length mismatch gapopen qstart qend sstart send evalue bitscore" > /dev/null

printf "Merging IGR clusters.\n" >> "$out_dir/log.txt";printf "Merging IGR clusters.\n"

piggy_cluster_merger.pl "$out_dir/representative_clusters_blast_out.tab" "$out_dir/representative_clusters_merged.tab" "$out_dir/cluster_intergenic_files" "$out_dir/clusters.txt" "$out_dir/representative_clusters.fasta" "$nuc_identity" "$len_identity"

readarray -t cluster_array < "$out_dir/clusters.txt"

cluster_count=${#cluster_array[@]}

printf "%i IGR clusters found after merging.\n" "$cluster_count" >> "$out_dir/log.txt";printf "%i IGR clusters found after merging.\n" "$cluster_count"

piggy_cluster_presence_absence.pl "$out_dir" >> "$out_dir/log.txt"

piggy_roary_piggy_combiner.pl "$out_dir" "$roary_dir" "$method" >> "$out_dir/log.txt"

if [ "$fast" -eq 0 ]
then

printf "Aligning IGR clusters...\n" >> "$out_dir/log.txt";printf "Aligning IGR clusters...\n"

for ((i = 0 ; i < $cluster_count ; i++))
do	
	cluster=${cluster_array[$i]}
	
	seq_count=$(awk '/^>/{a++}END{print a}' "$out_dir/cluster_intergenic_files/${cluster}.fasta")
	
	if [ "$seq_count" -gt 1 ]
	then
		$mafft_command --thread "$threads" --retree 2 --maxiterate 0 --adjustdirection --quiet "$out_dir/cluster_intergenic_files/${cluster}.fasta" 1> "$out_dir/cluster_intergenic_files/${cluster}_aligned_tmp.fasta" 2> /dev/null
		#$mafft_command --thread "$threads" --localpair --maxiterate 1000 --adjustdirection --quiet "$out_dir/cluster_intergenic_files/${cluster}.fasta" 1> "$out_dir/cluster_intergenic_files/${cluster}_aligned_tmp.fasta" 2> /dev/null
		
		piggy_fasta_converter.pl "$out_dir/cluster_intergenic_files/${cluster}_aligned_tmp.fasta" "$out_dir/cluster_intergenic_files/${cluster}_aligned.fasta"
		
		cp "$out_dir/cluster_intergenic_files/${cluster}_aligned.fasta" "$out_dir/cluster_intergenic_alignment_files/${cluster}_aligned.fasta"
	else
		cp "$out_dir/cluster_intergenic_files/${cluster}.fasta" "$out_dir/cluster_intergenic_alignment_files/${cluster}_aligned.fasta"
	fi
	
	rem=$(($i % 100))
	if [ "$rem" -eq 0 ] && [ "$i" -gt 0 ]
	then
		printf "%i / %i IGR clusters aligned.\n" "$i" "$cluster_count"
	fi
done

printf "IGR clusters aligned.\n" >> "$out_dir/log.txt";printf "IGR clusters aligned.\n"

#printf "Calculating gene divergences...\n" >> "$out_dir/log.txt";printf "Calculating gene divergences...\n"

#piggy_divergence_checker.pl "$roary_dir/pan_genome_sequences" "$out_dir" "roary_gene_divergences.csv"

#printf "Gene divergences calculated.\n" >> "$out_dir/log.txt";printf "Gene divergences calculated.\n"

printf "Calculating IGR divergences...\n" >> "$out_dir/log.txt";printf "Calculating IGR divergences...\n"

piggy_divergence_checker.pl "$out_dir/cluster_intergenic_alignment_files" "$out_dir" "cluster_IGR_divergences.csv"

printf "IGR divergences calculated.\n" >> "$out_dir/log.txt";printf "IGR divergences calculated.\n"

piggy_core_alignment_creator.pl "$out_dir" >> "$out_dir/log.txt"

if [ ! -d "$out_dir/switched_region_files" ]
then
	mkdir "$out_dir/switched_region_files"
fi

piggy_switched_region_creator.pl "$out_dir/roary_piggy_combined.tab" "$out_dir/cluster_intergenic_files" "$out_dir" "$out_dir/isolate_gene_fragment_files" >> "$out_dir/log.txt"

if [ ! -d "$out_dir/switched_region_alignment_files" ]
then
	mkdir "$out_dir/switched_region_alignment_files"
fi

readarray -t switched_region_array < "$out_dir/switched_regions.txt"

printf "Aligning candidate switched IGRs...\n" >> "$out_dir/log.txt";printf "Aligning candidate switched IGRs...\n"

for switched_region in ${switched_region_array[@]}
do
	$blastn_command -query "$out_dir/switched_region_files/${switched_region}.fasta" -subject "$out_dir/switched_region_files/${switched_region}_gene_fragments.fasta" -dust no -task blastn -outfmt 6 -out "$out_dir/blast_out.tab"
	
	blast_hit=$(piggy_blast_parser_overlaps.pl "$out_dir/blast_out.tab")
		
	if [ "$blast_hit" = "no_hit" ]
	then
		$blastn_command -query "$out_dir/switched_region_files/${switched_region}.fasta" -subject "$out_dir/switched_region_files/${switched_region}.fasta" -dust no -task blastn -outfmt 6 -out "$out_dir/blast_out.tab"
	
		blast_hit=$(piggy_blast_parser.pl "$out_dir/blast_out.tab" "$out_dir/switched_region_files/${switched_region}.fasta" "$out_dir/switched_region_files/${switched_region}_aligned.fasta")
	
		rm "$out_dir/blast_out.tab"
	
		if [ "$blast_hit" = "hit" ]
		then
			$mafft_command --thread "$threads" --retree 2 --maxiterate 0 --adjustdirection --quiet "$out_dir/switched_region_files/${switched_region}.fasta" 1> "$out_dir/switched_region_files/${switched_region}_aligned_tmp.fasta" 2> /dev/null
			#$mafft_command --thread "$threads" --localpair --maxiterate 1000 --adjustdirection --quiet "$out_dir/switched_region_files/${switched_region}.fasta" 1> "$out_dir/switched_region_files/${switched_region}_aligned_tmp.fasta" 2> /dev/null
	
			piggy_fasta_converter.pl "$out_dir/switched_region_files/${switched_region}_aligned_tmp.fasta" "$out_dir/switched_region_files/${switched_region}_aligned.fasta"
		fi
	
		cp "$out_dir/switched_region_files/${switched_region}_aligned.fasta" "$out_dir/switched_region_alignment_files/${switched_region}_aligned.fasta"
	fi
done

printf "Candidate switched IGRs aligned.\n" >> "$out_dir/log.txt";printf "Candidate switched IGRs aligned.\n"

printf "Calculating candidate switched IGR divergences...\n" >> "$out_dir/log.txt";printf "Calculating candidate switched IGR divergences...\n"

piggy_divergence_checker.pl "$out_dir/switched_region_alignment_files" "$out_dir" "switched_region_divergences.csv"

printf "Candidate switched IGR divergences calculated.\n" >> "$out_dir/log.txt";printf "Candidate switched IGR divergences calculated.\n"

if [ "$R_plots" -eq 1 ]
then
	printf "Making switched region R plots.\n"

	# Needs R, Rscript, ggplot2, reshape2.

	piggy_SR_plotter.R "$out_dir" "$nuc_identity" "$len_identity" &> /dev/null
fi

fi

if [ "$R_plots" -eq 1 ]
then
	printf "Making general R plots.\n"

	# Needs R, Rscript, ggplot2, reshape2.

	piggy_R_plotter.R "$out_dir" "$roary_dir" &> /dev/null
fi

# Cleanup

if [ "$R_plots" -eq 1 ]
then
	mkdir "$out_dir/plots" &> /dev/null
	mv "$out_dir/"*".tif" "$out_dir/plots"
fi

if [ "$fast" -eq 0 ]
then
	rm -r "$out_dir/switched_region_files"
	rm -r "$out_dir/isolate_core_IGR_tmp"
	
	rm "$out_dir/switched_regions.txt"
fi

rm -r "$out_dir/coordinate_files"
rm -r "$out_dir/isolate_intergenic_files"
rm -r "$out_dir/isolate_gene_fragment_files"
rm -r "$out_dir/cluster_intergenic_files"
rm -r "$out_dir/cluster_representative_files"

rm "$out_dir/clusters.txt"
rm "$out_dir/isolates.txt"
rm "$out_dir/representative_clusters_db.nhr"
rm "$out_dir/representative_clusters_db.nin"
rm "$out_dir/representative_clusters_db.nsq"
rm "$out_dir/representative_clusters_merged.tab"
rm "$out_dir/representative_clusters.fasta"
rm "$out_dir/representative_clusters_blast_out.tab"
rm "$out_dir/representative_clusters_blast_out_modified.tab"
rm "$out_dir/IGR_sequences_clustered.fasta"
rm "$out_dir/IGR_sequences_clustered.fasta.clstr"

